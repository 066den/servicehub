import { useState } from 'react'
import { Field, Form, Formik } from 'formik'
import Radio from '../ui/forms/Radio'
import Input from '../ui/forms/Input'
import PlacesAutocomplete from '../ui/forms/PlacesAutocomplete'
import Map from '../common/Map'
import { LocationData } from '@/types'
import Button from '../ui/Button'
import classNames from 'classnames'
import Textarea from '../ui/forms/Textarea'
import { useUserProfile } from '@/hooks/storeHooks/useUserProfile'
import LoadingSpinner from '../ui/LoadingSpinner'
import InputPhone from '../ui/forms/InputPhone'
import { useProvider } from '@/hooks/storeHooks/useProvider'
import { ProviderType } from '@prisma/client'
import * as Yup from 'yup'

const ProviderRegister = () => {
	const { user, isLoading } = useUserProfile()
	const { createProvider } = useProvider()

	const [location, setLocation] = useState<LocationData | null>(null)
	const [type, setType] = useState<ProviderType>(ProviderType.INDIVIDUAL)

	const initialValues = {
		type: ProviderType.INDIVIDUAL,
		businessName: `${user?.lastName} ${user?.firstName}` || '',
		email: '',
		phone: user?.phone || '',
		description: '',
	}

	const validationSchema = Yup.object().shape({
		businessName: Yup.string().required(
			type === ProviderType.COMPANY
				? '–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ—é'
				: '–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º º—è —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º–∏'
		),
		phone: Yup.string().required('–¢–µ–ª–µ—Ñ–æ–Ω —î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–º'),
		description: Yup.string().max(500, '–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª—ñ–≤'),
	})

	const onSubmit = (values: typeof initialValues) => {
		createProvider({
			...values,
			type: values.type as ProviderType,
		})
	}

	if (isLoading) return <LoadingSpinner color='primary' size='lg' />

	return (
		<Formik
			initialValues={initialValues}
			validationSchema={validationSchema}
			onSubmit={onSubmit}
		>
			{({ isValid, isSubmitting, setFieldValue }) => (
				<Form>
					<div className='form-grid form-group'>
						<div
							className={classNames('account-type', {
								selected: type === ProviderType.INDIVIDUAL,
							})}
							onClick={() => {
								setType(ProviderType.INDIVIDUAL)
								setFieldValue('type', ProviderType.INDIVIDUAL)
							}}
						>
							<Field
								type='radio'
								name='type'
								value={ProviderType.INDIVIDUAL}
								component={Radio}
							/>
							<div className='account-type-icon'>üôã‚Äç‚ôÇÔ∏è</div>
							<div className='account-type-title'>–§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞</div>
							<div className='account-type-desc'>
								–î–ª—è —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä—ñ–≤, –º–∞–π—Å—Ç—Ä—ñ–≤, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö
								–≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
							</div>
						</div>

						<div
							className={classNames('account-type', {
								selected: type === ProviderType.COMPANY,
							})}
							onClick={() => {
								setType(ProviderType.COMPANY)
								setFieldValue('type', ProviderType.COMPANY)
							}}
						>
							<Field
								name='type'
								value={ProviderType.COMPANY}
								component={Radio}
							/>
							<div className='account-type-icon'>üè¢</div>
							<div className='account-type-title'>–ö–æ–º–ø–∞–Ω—ñ—è</div>
							<div className='account-type-desc'>
								–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∞–±–æ –∫–æ–º–∞–Ω–¥–∞, —â–æ –Ω–∞–¥–∞—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏
							</div>
						</div>
					</div>

					<Field
						name='businessName'
						component={Input}
						label={
							type === ProviderType.COMPANY
								? '–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó'
								: '–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º º—è'
						}
						required
					/>

					<div className='form-grid'>
						<Field name='email' type='email' component={Input} label='Email' />
						<Field
							name='phone'
							component={InputPhone}
							label='–¢–µ–ª–µ—Ñ–æ–Ω'
							required
						/>
					</div>

					<Field
						name='description'
						component={Textarea}
						label='–ü—Ä–æ —Å–µ–±–µ'
						placeholder='–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–≤—ñ–π –¥–æ—Å–≤—ñ–¥, –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Ä–æ–±–æ—Ç–∏...'
						helperText='–û–ø–∏—Å –¥–æ–ø–æ–º–æ–∂–µ –∫–ª—ñ—î–Ω—Ç–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –≤–∞—à—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ'
						maxLength={500}
					/>

					<PlacesAutocomplete
						onLocationSelect={setLocation}
						label='–ê–¥—Ä–µ—Å–∞'
						placeholder='–ü–æ—á–Ω—ñ—Ç—å –≤–≤–æ–¥–∏—Ç–∏ –∞–¥—Ä–µ—Å—É...'
						types={['address']}
					/>
					<div className='map-container form-group'>
						<Map center={location?.coordinates} height={300} zoom={15} />
					</div>

					<Button
						color='accent'
						disabled={!isValid || isSubmitting}
						type='submit'
					>
						–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
					</Button>
				</Form>
			)}
		</Formik>
	)
}

export default ProviderRegister
