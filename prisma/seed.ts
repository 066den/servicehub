import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

// –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ESM
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const prisma = new PrismaClient()

async function main() {
	console.log('‚úÖ –ó–∞–ø—É—Å–∫ —Å–∏–¥-—Å–∫—Ä–∏–ø—Ç–∞...')

	const filePath = path.join(__dirname, 'categories.json')

	if (!fs.existsSync(filePath)) {
		console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
		process.exit(1)
	}

	const data = fs.readFileSync(filePath, 'utf-8')
	const categories = JSON.parse(data)

	console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)

	for (const cat of categories) {
		await prisma.category.upsert({
			where: { slug: cat.slug },
			update: {},
			create: {
				name: cat.name,
				slug: cat.slug,
				icon: cat.icon,
				description: cat.description,
			},
		})
		console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${cat.name}`)
	}
}

async function mainTypes() {
	console.log('‚úÖ –ó–∞–ø—É—Å–∫ —Å–∏–¥-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤...')

	const filePath = path.join(__dirname, 'types.json')

	if (!fs.existsSync(filePath)) {
		console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
		process.exit(1)
	}

	const data = fs.readFileSync(filePath, 'utf-8')
	const typesData = JSON.parse(data)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id –ø–æ slug
	const categories = await prisma.category.findMany({
		select: { id: true, slug: true },
	})
	const categoryMap: Record<string, number> = categories.reduce((acc, cat) => {
		if (cat.slug !== null) {
			acc[cat.slug] = cat.id
		}
		return acc
	}, {} as Record<string, number>)

	console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${typesData.length} —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥`)

	for (const type of typesData) {
		const categoryId = categoryMap[type.categoryId]
		if (!categoryId) {
			console.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${type.categoryId}`)
			continue
		}

		await prisma.type.upsert({
			where: { slug: type.slug },
			update: {},
			create: {
				name: type.name,
				slug: type.slug,
				icon: type.icon,
				description: type.description,
				categoryId: categoryId,
			},
		})
		console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${type.name}`)
	}

	console.log('üéâ –í—Å–µ —Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
}

// main()
// 	.then(async () => {
// 		console.log('üéâ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
// 		await prisma.$disconnect()
// 	})
// 	.catch(async e => {
// 		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', e)
// 		await prisma.$disconnect()
// 		process.exit(1)
// 	})

mainTypes()
	.then(async () => {
		await prisma.$disconnect()
	})
	.catch(async e => {
		console.error('‚ùå –û—à–∏–±–∫–∞:', e)
		await prisma.$disconnect()
		process.exit(1)
	})
