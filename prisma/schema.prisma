generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

model User {
  id                     String   @id @default(uuid()) @db.Uuid
  phone                  String    @unique
  phoneNormalized        String?   @unique
  email                  String?   @unique
  firstName              String
  lastName               String?
  avatar                 String?
  address                Json?
  role                   Role    @default(CLIENT)
  isVerified             Boolean   @default(false)
  lastLoginAt            DateTime?
  isActive               Boolean   @default(true)
  isDeleted              Boolean   @default(false)
  notificationPreferences Json?   
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  sessions               Session[]
  orders                 Order[]   @relation("ClientOrders")
  reviews                Review[]  @relation("ClientReviews")
  providers              Provider[]
}

model Provider {
  id                    Int      @id @default(autoincrement())
  user                  User?    @relation(fields: [userId], references: [id])
  userId                Int?
  businesName           String
  description           String?
  status                String   @default("PENDING")
  rating                Float    @default(0)
  reviewCount           Int      @default(0)
  workingHours          Json?
  serviceAreas          Json?
  documents             Json?
  isActive              Boolean  @default(true)
  isDeleted             Boolean  @default(false)
  subscriptionPlan      String   @default("BASIC")
  subscriptionExpiresAt DateTime?
  location              Json?
  instagram             String   @default("https://www.instagram.com")
  facebook              String   @default("https://www.facebook.com")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  orders                Order[]
  reviews               Review[]
  services              Service[]
}

model Service {
  id              Int      @id @default(autoincrement())
  provider        Provider @relation(fields: [providerId], references: [id])
  providerId      Int
  name            String
  description     String?
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      Int
  type            Type     @relation(fields: [typeId], references: [id])
  typeId          Int
  price           Float?
  duration        Int?
  pricingOptions  Json?
  tags            String[]
  photos          String[]
  requirements    Json?
  isActive        Boolean  @default(true)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
}

model Order {
  id             Int      @id @default(autoincrement())
  client         User     @relation("ClientOrders", fields: [clientId], references: [id])
  clientId       Int
  provider       Provider @relation(fields: [providerId], references: [id])
  providerId     Int
  service        Service  @relation(fields: [serviceId], references: [id])
  serviceId      Int
  status         String   @default("CREATED")
  scheduledAt    DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  serviceDetails Json?
  location       Json?
  clientNotes    String?
  providerNotes  String?
  totalAmount    Float?
  platformFee    Float?
  paymentStatus  String   @default("PENDING")
  photos         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviews        Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  services Service[]
  types    Type[]
}

model Type {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  services   Service[]
}

model Review {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  client     User     @relation("ClientReviews", fields: [clientId], references: [id])
  clientId   Int
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
  rating     Int
  comment    String?
  photos     String[]
  response   String?
  createdAt  DateTime @default(now())
}

model Session {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  token             String
  refreshToken      String
  deviceInfo        String?
  ipAddress         String?
  userAgent         String?
  isActive          Boolean  @default(true)
  expiresAt         DateTime
  lastActivityAt    DateTime @default(now())
  deactivatedReason String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

